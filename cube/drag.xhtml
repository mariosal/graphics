<?xml version='1.0' ?>
<!DOCTYPE html>
<html xmlns='http://www.w3.org/1999/xhtml'>
    <head>
        <title>3D Cube Dragging</title>

        <link href='http://fonts.googleapis.com/css?family=Droid+Sans' rel='stylesheet' type='text/css' />
        <style>
            h1 {
                text-align: center;
                font-family: 'Droid Sans';
                font-weight: normal;
            }
            canvas {
                display: block;
                border: 1px #000 solid;
                margin: 0 auto;
            }
        </style>
    </head>

    <body>
        <h1>Draggable 3D cube using Canvas</h1>
        <canvas width='500' height='500'></canvas>

        <script src='../libs/sylvester.js' type='application/javascript'></script>
        <script type='application/javascript'>
            <![CDATA[
                var ccw = function ( a, b, c ) {
                    return ( b[ 0 ] - a[ 0 ] ) * ( c[ 1 ] - a[ 1 ] ) - ( b[ 1 ] - a[ 1 ] ) * ( c[ 0 ] - a[ 0 ] );
                };
                var drawTriangle = function ( ctx, a, b, c, color ) {
                    ctx.fillStyle = color;
                    ctx.beginPath();
                    ctx.moveTo( a[ 0 ], -a[ 1 ] + 500 );
                    ctx.lineTo( b[ 0 ], -b[ 1 ] + 500 );
                    ctx.lineTo( c[ 0 ], -c[ 1 ] + 500 );
                    ctx.closePath();
                    ctx.fill();
                };

                var canvas = document.querySelector( 'canvas' );
                var ctx = canvas.getContext( '2d' );
                var vertices = [
                    [ -1,  1,  1, 1 ],
                    [  1,  1,  1, 1 ],
                    [  1, -1,  1, 1 ],
                    [ -1, -1,  1, 1 ],
                    [ -1,  1, -1, 1 ],
                    [  1,  1, -1, 1 ],
                    [  1, -1, -1, 1 ],
                    [ -1, -1, -1, 1 ]
                ];
                var indices = [
                    // Front
                    [ 0, 2, 1 ], 
                    [ 0, 3, 2 ],

                    // Back
                    [ 5, 7, 4 ],
                    [ 7, 5, 6 ],

                    // Up
                    [ 5, 4, 1 ],
                    [ 1, 4, 0 ],

                    // Down
                    [ 2, 3, 7 ],
                    [ 7, 6, 2 ],

                    // Left
                    [ 0, 4, 3 ],
                    [ 3, 4, 7 ],

                    // Right
                    [ 1, 6, 5 ],
                    [ 1, 2, 6 ]
                ];

                // Column-major order
                var project = [
                    [ 1, 0, 0,    0 ],
                    [ 0, 1, 0,    0 ],
                    [ 0, 0, -0.2, 0 ],
                    [ 0, 0, 2,    1 ]
                ];

                var thetaX = 0;
                var thetaY = 0;
                var render = function () {
                    ctx.clearRect( 0, 0, 500, 500 );

                    // Column-major order
                    var rotateX = [
                        [ 1, 0,                   0,                   0 ],
                        [ 0, Math.cos( thetaX ),  Math.sin( thetaX ),  0 ],
                        [ 0, -Math.sin( thetaX ), Math.cos( thetaX ),  0 ],
                        [ 0, 0,                   0,                   1 ]
                    ];
                    var rotateY = [
                        [ Math.cos( thetaY ), 0, -Math.sin( thetaY ), 0 ],
                        [ 0,                  1, 0,                   0 ],
                        [ Math.sin( thetaY ), 0, Math.cos( thetaY ),  0 ],
                        [ 0,                  0, 0,                   1 ]
                    ];

                    vertices = $M( vertices ).multiply(
                        $M( rotateY ).multiply(
                            $M( rotateX )
                        )
                    ).elements;
                    var projectedVertices = $M( vertices ).multiply(
                        $M( project )
                    ).elements;

                    var color = 0;
                    var colors = [ 'red', 'green', 'blue', 'magenta', 'cyan', 'yellow' ];
                    indices.forEach( function( value ) {
                        var a = projectedVertices[ value[ 0 ] ].slice();
                        var b = projectedVertices[ value[ 1 ] ].slice();
                        var c = projectedVertices[ value[ 2 ] ].slice();

                        a[ 0 ] /= a[ 2 ];
                        a[ 1 ] /= a[ 2 ];

                        b[ 0 ] /= b[ 2 ];
                        b[ 1 ] /= b[ 2 ];

                        c[ 0 ] /= c[ 2 ];
                        c[ 1 ] /= c[ 2 ];

                        var moved = $M( [ a, b, c ] ).multiply( $M( [
                            [ 125, 0,   0, 0 ],
                            [ 0,   125, 0, 0 ],
                            [ 0,   0,   1, 0 ],
                            [ 250, 250, 0, 1 ]
                        ] ) ).elements;
                        a = moved[ 0 ];
                        b = moved[ 1 ];
                        c = moved[ 2 ];

                        if ( ccw( a, b, c ) > 0 ) {
                            drawTriangle( ctx, a, b, c, colors[ Math.floor( color / 2 ) ] );
                        }
                        ++color;
                    } );
                    thetaX = 0;
                    thetaY = 0;
                };
                setInterval( render, 17 );

                var mouse;
                var drag = function ( e ) {
                    thetaY = -( mouse.x - e.offsetX ) / 50;
                    thetaX = -( mouse.y - e.offsetY ) / 50;
                    mouse = {
                        x: e.offsetX,
                        y: e.offsetY
                    };
                };
                canvas.addEventListener( 'mousedown', function ( e ) {
                    mouse = {
                        x: e.offsetX,
                        y: e.offsetY
                    };
                    addEventListener( 'mousemove', drag );
                } );
                canvas.addEventListener( 'mouseup', function () {
                    removeEventListener( 'mousemove', drag );
                } );
                canvas.addEventListener( 'mouseout', function () {
                    removeEventListener( 'mousemove', drag );
                } );
            ]]>
        </script>
    </body>
</html>
